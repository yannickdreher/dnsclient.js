/*
 * Project:  dnsclient.js
 * File:     dist/dnsclient.min.js
 * Author:   Yannick Dreher (yannick.dreher@dremaxx.de)
 * -----
 * Created:  Friday, 29th November 2024 3:30:10 pm
 * Modified: Friday, 07th February 2025 05:46:28 pm
 * -----
 * License: MIT License (https://opensource.org/licenses/MIT)
 * Copyright Â© 2024-2025 Yannick Dreher
 */
const QR_NAMES=Object.freeze({0:"QUERY",1:"RESPONSE"}),OPCODE_NAMES=Object.freeze({0:"QUERY",1:"IQUERY",2:"STATUS",3:"RESERVED",4:"NOTIFY",5:"UPDATE",6:"DSO"}),RCODE_NAMES=Object.freeze({0:"NOERROR",1:"FORMERR",2:"SERVFAIL",3:"NXDOMAIN",4:"NOTIMP",5:"REFUSED",6:"YXDOMAIN",7:"XRRSET",8:"NOTAUTH",9:"NOTZONE",10:"BADVERS",11:"BADSIG",12:"BADKEY",13:"BADTIME",14:"BADMODE",15:"BADNAME",16:"BADALG",17:"BADTRUNC",18:"BADCOOKIE"}),TYPE_NAMES=Object.freeze({1:"A",2:"NS",3:"MD",4:"MF",5:"CNAME",6:"SOA",7:"MB",8:"MG",9:"MR",10:"NULL",11:"WKS",12:"PTR",13:"HINFO",14:"MINFO",15:"MX",16:"TXT",17:"RP",18:"AFSDB",19:"X25",20:"ISDN",21:"RT",22:"NSAP",23:"NSAP_PTR",24:"SIG",25:"KEY",26:"PX",27:"GPOS",28:"AAAA",29:"LOC",30:"NXT",31:"EID",32:"NIMLOC",33:"SRV",34:"ATMA",35:"NAPTR",36:"KX",37:"CERT",38:"A6",39:"DNAME",40:"SINK",41:"OPT",42:"APL",43:"DS",44:"SSHFP",45:"IPSECKEY",46:"RRSIG",47:"NSEC",48:"DNSKEY",49:"DHCID",50:"NSEC3",51:"NSEC3PARAM",52:"TLSA",53:"SMIMEA",55:"HIP",56:"NINFO",57:"RKEY",58:"TALINK",59:"CDS",60:"CDNSKEY",61:"OPENPGPKEY",62:"CSYNC",63:"ZONEMD",64:"SVCB",65:"HTTPS",99:"SPF",100:"UINFO",101:"UID",102:"GID",103:"UNSPEC",104:"NID",105:"L32",106:"L64",107:"LP",108:"EUI48",109:"EUI64",249:"TKEY",250:"TSIG",251:"IXFR",252:"AXFR",253:"MAILB",254:"MAILA",255:"ANY",256:"URI",257:"CAA",258:"AVC",259:"DOA",260:"AMTRELAY",32768:"TA",32769:"DLV"}),CLASS_NAMES=Object.freeze({1:"IN",2:"CS",3:"CH",4:"HS",254:"NONE",255:"ANY"});export const TYPE=Object.freeze({A:1,NS:2,CNAME:5,SOA:6,HINFO:13,MX:15,TXT:16,AAAA:28,SRV:33,DS:43,RRSIG:46,NSEC:47,DNSKEY:48,CDS:59,CDNSKEY:60,ANY:255});export const CLAZZ=Object.freeze({IN:1,CS:2,CH:3,HS:4,NONE:254,ANY:255});export class Question{constructor(e,t,a){this.name=e,this.type=t,this.clazz=a}}export class DnsSerializer{static deserialize(e){const t=new DataView(e),a=t.getUint16(0),i=this.HeaderFlags.deserialize(t.getUint16(2)),r=t.getUint16(4),n=t.getUint16(6),s=t.getUint16(8),l=t.getUint16(10);let o=12;const c=[];for(let e=0;e<r;e++){const e=this.DomainName.deserialize(t,o);o=e.offset;const a=TYPE_NAMES[t.getUint16(o)];o+=2;const i=CLASS_NAMES[t.getUint16(o)];o+=2,c.push({name:e.name,type:a,clazz:i})}const S=[];for(let e=0;e<n;e++){const e=this.DomainName.deserialize(t,o);o=e.offset;const a=TYPE_NAMES[t.getUint16(o)];o+=2;const i=CLASS_NAMES[t.getUint16(o)];o+=2;const r=t.getUint32(o);o+=4;const n=t.getUint16(o);o+=2;let s=[{key:"",value:""}];switch(a){case"A":s=this.A.deserialize(t,o,n);break;case"NS":s=this.NS.deserialize(t,o);break;case"CNAME":s=this.CNAME.deserialize(t,o);break;case"SOA":s=this.SOA.deserialize(t,o);break;case"MX":s=this.MX.deserialize(t,o);break;case"AAAA":s=this.AAAA.deserialize(t,o,n);break;case"SRV":s=this.SRV.deserialize(t,o);break;case"DS":case"CDS":s=this.DS.deserialize(t,o,n);break;case"TXT":s=this.TXT.deserialize(t,o);break;case"RRSIG":s=this.RRSIG.deserialize(t,o,n);break;case"NSEC":s=this.NSEC.deserialize(t,o,n);break;case"DNSKEY":case"CDNSKEY":s=this.DNSKEY.deserialize(t,o);break;default:s=[{key:"info",value:"this RR type is not yet taken into account by dnsclient.js."}]}o+=n,S.push({name:e.name,type:a,clazz:i,ttl:r,data:s})}return{transactionID:a,flags:i,qdcount:r,ancount:n,arcount:s,adcount:l,questions:c,answers:S}}static serialize(e){const t=crypto.getRandomValues(new Uint8Array(2)),a=new Uint8Array([1,0]),i=new Uint8Array([0,1]),r=e.name.split(".").map((e=>{const t=new Array(e.length+1);t[0]=e.length;for(let a=0;a<e.length;a++)t[a+1]=e.charCodeAt(a);return t})).flat(1/0).concat([0]),n=new Uint8Array([0,e.type]),s=new Uint8Array([0,e.clazz]);return Uint8Array.from([...t,...a,...i,0,0,0,0,0,0,...r,...n,...s])}static HeaderFlags={deserialize:e=>({qr:QR_NAMES[e>>15&1],opcode:OPCODE_NAMES[e>>11&15],aa:e>>10&1,tc:e>>9&1,rd:e>>8&1,ra:e>>7&1,rcode:RCODE_NAMES[15&e]})};static DomainName={deserialize(e,t){let a=[],i=e.getUint8(t),r=!1,n=0,s=t;for(;0!==i;)192&~i?(t++,a.push((new TextDecoder).decode(e.buffer.slice(t,t+i))),t+=i,i=e.getUint8(t)):(r||(n=t+2),t=(63&i)<<8|e.getUint8(t+1),i=e.getUint8(t),r=!0);return r||(n=t+1),{name:a.join("."),offset:n,length:n-s}}};static A={deserialize(e,t,a){if(4!==a)throw new Error("Invalid IPv4 byte array length.");return[{key:"ipv4",value:new Uint8Array(e.buffer.slice(t,t+a)).join(".")}]}};static NS={deserialize:(e,t)=>[{key:"name",value:DnsSerializer.DomainName.deserialize(e,t).name}]};static CNAME={deserialize:(e,t)=>[{key:"name",value:DnsSerializer.DomainName.deserialize(e,t).name}]};static SOA={deserialize(e,t){const a=DnsSerializer.DomainName.deserialize(e,t);t=a.offset;const i=DnsSerializer.DomainName.deserialize(e,t);t=i.offset;const r=e.getUint32(t+0),n=e.getUint32(t+4),s=e.getUint32(t+8),l=e.getUint32(t+12),o=e.getUint32(t+16);return[{key:"mname",value:a.name},{key:"rname",value:i.name},{key:"serial",value:r},{key:"refresh",value:n},{key:"retry",value:s},{key:"expire",value:l},{key:"minimum",value:o}]}};static HINFO={deserialize(e,t){const a=e.getUint8(t);t+=1;const i=(new TextDecoder).decode(e.buffer.slice(t,t+a));t+=a;const r=e.getUint8(t);t+=1;const n=(new TextDecoder).decode(e.buffer.slice(t,t+r));t+=r;return[{key:"cpu",value:i},{key:"os",value:n}]}};static MX={deserialize:(e,t)=>[{key:"preference",value:e.getUint16(t)},{key:"exchange",value:DnsSerializer.DomainName.deserialize(e,t+2).name}]};static AAAA={deserialize(e,t,a){if(16!==a)throw new Error("Invalid IPv6 byte array length.");const i=new Uint8Array(e.buffer.slice(t,t+a)),r=[];for(let e=0;e<16;e+=2){const t=i[e]<<8|i[e+1];r.push(t.toString(16))}return[{key:"ipv6",value:r.join(":").replace(/(^|:)0(:0)*(:|$)/,"$1::$3").replace(/:{3,4}/,"::")}]}};static SRV={deserialize:(e,t)=>[{key:"priority",value:e.getUint16(t+0)},{key:"weight",value:e.getUint16(t+2)},{key:"port",value:e.getUint16(t+4)},{key:"target",value:DnsSerializer.DomainName.deserialize(e,t+6).name}]};static DS={deserialize(e,t,a){const i=e.getUint16(t);t+=2;const r=e.getUint8(t);t+=1;const n=e.getUint8(t);t+=1;const s=new Uint8Array(e.buffer.slice(t,t+(a-4)));return[{key:"keyTag",value:i},{key:"algorithm",value:r},{key:"digestType",value:n},{key:"digest",value:btoa(String.fromCharCode(...s))}]}};static TXT={deserialize(e,t){const a=e.getUint8(t);return[{key:"text",value:(new TextDecoder).decode(e.buffer.slice(t+1,t+1+a))}]}};static RRSIG={deserialize(e,t,a){const i=TYPE_NAMES[e.getUint16(t)],r=e.getUint8(t+2),n=e.getUint8(t+3),s=e.getUint32(t+4),l=e.getUint32(t+8),o=e.getUint32(t+12),c=e.getUint16(t+16),S=DnsSerializer.DomainName.deserialize(e,t+18),A=e.buffer.slice(S.offset,t+a),N=btoa(String.fromCharCode(...new Uint8Array(A)));return[{key:"typeCovered",value:i},{key:"algorithm",value:r},{key:"labels",value:n},{key:"originalTtl",value:s},{key:"expiration",value:new Date(1e3*l)},{key:"inception",value:new Date(1e3*o)},{key:"keyTag",value:c},{key:"signersName",value:S.name},{key:"signature",value:N}]}};static NSEC={deserialize(e,t,a){const i=DnsSerializer.DomainName.deserialize(e,t),r=(t+=i.length)+(a-i.length),n=[];for(;t<r;){const a=e.getUint8(t++),i=e.getUint8(t++);for(let r=0;r<i;r++){const i=e.getUint8(t++);for(let e=0;e<8;e++)if(i&1<<7-e){const t=256*a+8*r+e;n.push(TYPE_NAMES[t])}}}return[{key:"nextDomain",value:i.name},{key:"typeBitmaps",value:n}]}};static DNSKEY={deserialize(e,t,a){let i=e.getUint16(t);switch(t+=2,i){case 256:i="ZSK";break;case 257:i="KSK";break;default:i="unknown"}const r=e.getUint8(t);t+=1;const n=e.getUint8(t);t+=1;const s=new Uint8Array(e.buffer.slice(t,t+(a-4)));return[{key:"flag",value:i},{key:"protocol",value:r},{key:"algorithm",value:n},{key:"publickey",value:btoa(String.fromCharCode(...s))}]}}}export async function query(e,t){let a="";const i=DnsSerializer.serialize(t),r=performance.now(),n=await fetch(e,{method:"POST",headers:{"Content-Type":"application/dns-message"},body:i}),s=performance.now();if(!n.ok)throw new Error(`DNS query request failed with status code: ${n.status}`);{const e=await n.arrayBuffer();a=DnsSerializer.deserialize(e)}return{message:a,latency:Math.round(s-r)}}
