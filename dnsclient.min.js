const qrs=Object.freeze({0:"QUERY",1:"RESPONSE"}),opcodes=Object.freeze({0:"QUERY",1:"IQUERY",2:"STATUS",3:"RESERVED",4:"NOTIFY",5:"UPDATE",6:"DSO"}),rcodes=Object.freeze({0:"NOERROR",1:"FORMERR",2:"SERVFAIL",3:"NXDOMAIN",4:"NOTIMP",5:"REFUSED",6:"YXDOMAIN",7:"XRRSET",8:"NOTAUTH",9:"NOTZONE",10:"BADVERS",11:"BADSIG",12:"BADKEY",13:"BADTIME",14:"BADMODE",15:"BADNAME",16:"BADALG",17:"BADTRUNC",18:"BADCOOKIE"}),types=Object.freeze({1:"A",2:"NS",3:"MD",4:"MF",5:"CNAME",6:"SOA",7:"MB",8:"MG",9:"MR",10:"NULL",11:"WKS",12:"PTR",13:"HINFO",14:"MINFO",15:"MX",16:"TXT",17:"RP",18:"AFSDB",19:"X25",20:"ISDN",21:"RT",22:"NSAP",23:"NSAP_PTR",24:"SIG",25:"KEY",26:"PX",27:"GPOS",28:"AAAA",29:"LOC",30:"NXT",31:"EID",32:"NIMLOC",33:"SRV",34:"ATMA",35:"NAPTR",36:"KX",37:"CERT",38:"A6",39:"DNAME",40:"SINK",41:"OPT",42:"APL",43:"DS",44:"SSHFP",45:"IPSECKEY",46:"RRSIG",47:"NSEC",48:"DNSKEY",49:"DHCID",50:"NSEC3",51:"NSEC3PARAM",52:"TLSA",53:"SMIMEA",55:"HIP",56:"NINFO",57:"RKEY",58:"TALINK",59:"CDS",60:"CDNSKEY",61:"OPENPGPKEY",62:"CSYNC",63:"ZONEMD",64:"SVCB",65:"HTTPS",99:"SPF",100:"UINFO",101:"UID",102:"GID",103:"UNSPEC",104:"NID",105:"L32",106:"L64",107:"LP",108:"EUI48",109:"EUI64",249:"TKEY",250:"TSIG",251:"IXFR",252:"AXFR",253:"MAILB",254:"MAILA",255:"ANY",256:"URI",257:"CAA",258:"AVC",259:"DOA",260:"AMTRELAY",32768:"TA",32769:"DLV"}),classes=Object.freeze({1:"IN",2:"CS",3:"CH",4:"HS",254:"NONE",255:"ANY"});export class Question{constructor(e,t,n){this.name=e,this.type=t,this.clazz=n}}function parseHeaderFlags(e){return{qr:qrs[e>>15&1],opcode:opcodes[e>>11&15],aa:e>>10&1,tc:e>>9&1,rd:e>>8&1,ra:e>>7&1,rcode:rcodes[15&e]}}function parseResponseMessage(e){const t=new DataView(e),n=t.getUint16(0),r=parseHeaderFlags(t.getUint16(2)),s=t.getUint16(4),a=t.getUint16(6),o=t.getUint16(8),c=t.getUint16(10);let i=12;const A=[];for(let e=0;e<s;e++){const e=parseName(t,i);i=e.offset;const n=types[t.getUint16(i)],r=classes[t.getUint16(i+2)];i+=4,A.push({name:e.name,type:n,clazz:r})}const N=[];for(let e=0;e<a;e++){const e=parseName(t,i);i=e.offset;const n=types[t.getUint16(i)],r=classes[t.getUint16(i+2)],s=t.getUint32(i+4),a=t.getUint16(i+8);i+=10;let o="";if("A"===n){if(4!==a)throw new Error("Invalid IPv4 byte array length.");o=new Uint8Array(t.buffer.slice(i,i+a)).join(".")}else if("NS"===n||"CNAME"===n)o=parseName(t,i).name;else if("SOA"===n){const e=parseName(t,i);i=e.offset;const n=parseName(t,i);i=n.offset;const r=t.getUint32(i+0),s=t.getUint32(i+4),a=t.getUint32(i+8),c=t.getUint32(i+12),A=t.getUint32(i+16);i+=20,o={mname:e.name,rname:n.name,serial:r,refresh:s,retry:a,expire:c,minimum:A}}else if("MX"===n){const e=t.getUint16(i);i+=2;o={preference:e,exchange:parseName(t,i).name}}else if("AAAA"===n){if(16!==a)throw new Error("Invalid IPv6 byte array length.");const e=new Uint8Array(t.buffer.slice(i,i+a)),n=[];for(let t=0;t<16;t+=2){const r=e[t]<<8|e[t+1];n.push(r.toString(16))}o=n.join(":").replace(/(^|:)0(:0)*(:|$)/,"$1::$3").replace(/:{3,4}/,"::")}else o=(new TextDecoder).decode(t.buffer.slice(i,i+a));i+=a,N.push({name:e.name,type:n,clazz:r,ttl:s,data:o})}return{transactionID:n,flags:r,qdcount:s,ancount:a,arcount:o,adcount:c,questions:A,answers:N}}function parseQueryMessage(e){const t=crypto.getRandomValues(new Uint8Array(2)),n=new Uint8Array([1,0]),r=new Uint8Array([0,1]),s=e.name.split(".").map((e=>{const t=new Array(e.length+1);t[0]=e.length;for(let n=0;n<e.length;n++)t[n+1]=e.charCodeAt(n);return t})).flat(1/0).concat([0]),a=new Uint8Array([0,e.type]),o=new Uint8Array([0,e.clazz]);return Uint8Array.from([...t,...n,...r,0,0,0,0,0,0,...s,...a,...o])}function parseName(e,t){let n=[],r=e.getUint8(t),s=!1,a=0;for(;0!==r;)192==(192&r)?(s||(a=t+2),t=(63&r)<<8|e.getUint8(t+1),r=e.getUint8(t),s=!0):(t++,n.push((new TextDecoder).decode(e.buffer.slice(t,t+r))),t+=r,r=e.getUint8(t));return s||(a=t+1),{name:n.join("."),offset:a}}export async function query(e,t){let n="";const r=parseQueryMessage(t),s=performance.now(),a=await fetch(e,{method:"POST",headers:{"Content-Type":"application/dns-message"},body:r}),o=performance.now();if(!a.ok)throw new Error(`DNS query request failed with status code: ${a.status}`);n=parseResponseMessage(await a.arrayBuffer());return{message:n,latency:Math.round(o-s)}}